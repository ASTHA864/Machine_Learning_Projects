# -*- coding: utf-8 -*-
"""Mine_vs_Rock_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yMpnxH5LkzLkKCeinJS5qyfLNieWp5Qw

Importing the Dependencies
"""

import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing"""

#loadind dataset to a pandas dataframe
sonar_data= pd.read_csv('/content/sonar.all-data.csv', header=None)

sonar_data.head() #for printing first 5 rows

sonar_data.shape # for printing number of rows and column

sonar_data.describe() #describe gives statistical measures(mean,median) of the data

sonar_data[60].value_counts()

"""M --> Mine
R --> Rock
"""

sonar_data.groupby(60).mean()

#separating data and labels
X= sonar_data.drop(columns=60, axis=1)
Y=sonar_data[60]

print(X)
print(Y)

"""Training and Testind data"""

X_train,  X_test, Y_train, Y_test= train_test_split(X,Y, test_size=0.1, stratify=Y, random_state=1)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)
print(Y_train)

"""Model Training --> Logistic Regression"""

model = LogisticRegression()

# Training the Logistic Regression model with training data
model.fit(X_train,Y_train)

"""Model Evaluation"""

# Accuracy on  training data
X_train_prediction= model.predict(X_train)
training_data_accuracy= accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data:', training_data_accuracy)

# Accuracy on  testdata
X_test_prediction= model.predict(X_test)
testing_data_accuracy= accuracy_score(X_test_prediction, Y_test)

print('Accuracy on testing data:', testing_data_accuracy)

"""Making a Predictive System"""

# input_data =(0.0200,0.0371,0.0428,0.0207,0.0954,0.0986,0.1539,0.1601,0.3109,0.2111,0.1609,0.1582,0.2238,0.0645,0.0660,0.2273,0.3100,0.2999,0.5078,0.4797,0.5783,0.5071,0.4328,0.5550,0.6711,0.6415,0.7104,0.8080,0.6791,0.3857,0.1307,0.2604,0.5121,0.7547,0.8537,0.8507,0.6692,0.6097,0.4943,0.2744,0.0510,0.2834,0.2825,0.4256,0.2641,0.1386,0.1051,0.1343,0.0383,0.0324,0.0232,0.0027,0.0065,0.0159,0.0072,0.0167,0.0180,0.0084,0.0090,0.0032)
input_data=(0.0116,0.0744,0.0367,0.0225,0.0076,0.0545,0.1110,0.1069,0.1708,0.2271,0.3171,0.2882,0.2657,0.2307,0.1889,0.1791,0.2298,0.3715,0.6223,0.7260,0.7934,0.8045,0.8067,0.9173,0.9327,0.9562,1.0000,0.9818,0.8684,0.6381,0.3997,0.3242,0.2835,0.2413,0.2321,0.1260,0.0693,0.0701,0.1439,0.1475,0.0438,0.0469,0.1476,0.1742,0.1555,0.1651,0.1181,0.0720,0.0321,0.0056,0.0202,0.0141,0.0103,0.0100,0.0034,0.0026,0.0037,0.0044,0.0057,0.0035)
#changing input_data into numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape the numpy array as we are predicting for one instance
input_data_reshaped= input_data_as_numpy_array.reshape(1,-1)

prediction= model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]=='R'):
  print('The object is a Rock')
else:
  print('The object is a Mine')

